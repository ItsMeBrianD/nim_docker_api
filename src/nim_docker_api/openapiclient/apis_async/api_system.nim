#
# Docker Engine API
# 
# The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
# The version of the OpenAPI document: 1.41
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
# import json
# import logging
# import marshal
import jsony
import api_utils
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_auth_config
# import ../models/model_error_response
import ../models/model_event_message
import ../models/model_system_auth_response
import ../models/model_system_data_usage_response
import ../models/model_system_info
import ../models/model_system_version

const basepath = "http://localhost/v1.41"

# template constructResult[T](response: Response): untyped =
#   if response.code in {Http200, Http201, Http202, Http204, Http206}:
#     try:
#       when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
#         (some(json.to(parseJson(response.body), T.typedesc)), response)
#       else:
#         (some(marshal.to[T](response.body)), response)
#     except JsonParsingError:
#       # The server returned a malformed response though the response code is 2XX
#       # TODO: need better error handling
#       error("JsonParsingError")
#       (none(T.typedesc), response)
#   else:
#     (none(T.typedesc), response)


proc systemAuth*(httpClient: HttpClient, authConfig: AuthConfig): (Option[SystemAuthResponse], Response) =
  ## Check auth configuration
  httpClient.headers["Content-Type"] = "application/json"

  # let response = httpClient.post(basepath & "/auth", $(%authConfig))
  let response = httpClient.post(basepath & "/auth", authConfig.toJson())
  constructResult[SystemAuthResponse](response)


proc systemDataUsage*(httpClient: HttpClient): (Option[SystemDataUsageResponse], Response) =
  ## Get data usage information

  let response = httpClient.get(basepath & "/system/df")
  constructResult[SystemDataUsageResponse](response)


proc systemEvents*(httpClient: HttpClient, since: string, until: string, filters: string): (Option[EventMessage], Response) =
  ## Monitor events
  let query_for_api_call = encodeQuery([
    ("since", $since), # Show events created since this timestamp then stream new events.
    ("until", $until), # Show events created until this timestamp then stop streaming.
    ("filters", $filters), # A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:  - `config=<string>` config name or ID - `container=<string>` container name or ID - `daemon=<string>` daemon name or ID - `event=<string>` event type - `image=<string>` image name or ID - `label=<string>` image or container label - `network=<string>` network name or ID - `node=<string>` node ID - `plugin`=<string> plugin name or ID - `scope`=<string> local or swarm - `secret=<string>` secret name or ID - `service=<string>` service name or ID - `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config` - `volume=<string>` volume name 
  ])

  let response = httpClient.get(basepath & "/events" & "?" & query_for_api_call)
  constructResult[EventMessage](response)


proc systemInfo*(httpClient: HttpClient): (Option[SystemInfo], Response) =
  ## Get system information

  let response = httpClient.get(basepath & "/info")
  constructResult[SystemInfo](response)


proc systemPing*(httpClient: HttpClient): (Option[string], Response) =
  ## Ping

  let response = httpClient.get(basepath & "/_ping")
  constructResult[string](response)


proc systemPingHead*(httpClient: HttpClient): (Option[string], Response) =
  ## Ping

  let response = httpClient.head(basepath & "/_ping")
  constructResult[string](response)


proc systemVersion*(httpClient: HttpClient): (Option[SystemVersion], Response) =
  ## Get version

  let response = httpClient.get(basepath & "/version")
  constructResult[SystemVersion](response)

